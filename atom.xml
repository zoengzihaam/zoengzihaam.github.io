<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zoengzihaam.github.io</id>
    <title>卷毛</title>
    <updated>2021-04-02T08:49:56.508Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zoengzihaam.github.io"/>
    <link rel="self" href="https://zoengzihaam.github.io/atom.xml"/>
    <subtitle>没有撤退可言。</subtitle>
    <logo>https://zoengzihaam.github.io/images/avatar.png</logo>
    <icon>https://zoengzihaam.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 卷毛</rights>
    <entry>
        <title type="html"><![CDATA[Ubuntu 远程root登录]]></title>
        <id>https://zoengzihaam.github.io/post/21/</id>
        <link href="https://zoengzihaam.github.io/post/21/">
        </link>
        <updated>2021-04-02T08:48:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ubuntu远程root登录">Ubuntu远程root登录</h1>
<blockquote>
<p>低价购买了三年的腾讯云vps，尝试远程ssh登录的时候，发现无法使用root用户登录，只能使用默认的用户名，这就大大增加了使用时候的操作步骤，于是就尝试给Ubuntu赋予远程root使用的权限。</p>
</blockquote>
<h2 id="增加一个root密码">增加一个root密码</h2>
<blockquote>
<p>默认主机是没有root密码，我们这里新增一个root的密码。</p>
</blockquote>
<p>建议使用相同但不简单的密码，防止忘记也防止太简单出现数据损失。</p>
<pre><code class="language-shell">sudo passwd root
</code></pre>
<p>这里需要输入两次密码，出现修改成功即可。</p>
<h2 id="修改sshd配置">修改sshd配置</h2>
<blockquote>
<p><code>sshd</code>中默认不使用ROOT登录，修改<code>sshd</code>的配置文件来开启一下。</p>
</blockquote>
<ol>
<li>
<p>修改<code>sshd</code>的配置文件</p>
<pre><code class="language-shell">sudo vim /etc/ssh/sshd_config
</code></pre>
</li>
<li>
<p>修改 <code>PermitRootLogin</code> 的默认参数</p>
<p>这里我在原属性下面添加相同的属性，保留了原来的配置内容。</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20210402163653.png" alt="image-20210402163653587" loading="lazy"></figure>
</li>
<li>
<p>重启<code>ssh</code>服务</p>
<pre><code class="language-shell">sudo service ssh restart
</code></pre>
</li>
</ol>
<p>自此，这台vps主机就可以远程进行root登录。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于WIN10下启动应用程序出现MSVCR110.dll缺失的解决办法]]></title>
        <id>https://zoengzihaam.github.io/post/20/</id>
        <link href="https://zoengzihaam.github.io/post/20/">
        </link>
        <updated>2021-04-02T07:49:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="关于win10下启动应用程序出现msvcr110dll缺失的解决办法">关于WIN10下启动应用程序出现MSVCR110.dll缺失的解决办法</h1>
<blockquote>
<p>由于更换了电脑硬件，介于有工作环境的原因，没有彻底的重装系统，而是使用WIN10自带的重置，导致重装其他软件的时候，打开出现XXX.dll缺失无法启动应用程序。</p>
</blockquote>
<h2 id="问题">问题</h2>
<p>安装<code>xshell</code>之后，启动时出现：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">由</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">找</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">到</mi><mi>M</mi><mi>S</mi><mi>V</mi><mi>C</mi><mi>R</mi><mn>110.</mn><mi>d</mi><mi>l</mi><mi>l</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">无</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">继</mi><mi mathvariant="normal">续</mi><mi mathvariant="normal">执</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">代</mi><mi mathvariant="normal">码</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">重</mi><mi mathvariant="normal">新</mi><mi mathvariant="normal">安</mi><mi mathvariant="normal">装</mi><mi mathvariant="normal">程</mi><mi mathvariant="normal">序</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">能</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">解</mi><mi mathvariant="normal">决</mi><mi mathvariant="normal">此</mi><mi mathvariant="normal">问</mi><mi mathvariant="normal">题</mi><mi mathvariant="normal">。</mi></mrow><annotation encoding="application/x-tex">由于找不到 MSVCR110.dll，无法继续执行代码。重新安装程序可能会解决此问题。
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">找</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">.</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">无</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">继</span><span class="mord cjk_fallback">续</span><span class="mord cjk_fallback">执</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">重</span><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">安</span><span class="mord cjk_fallback">装</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">题</span><span class="mord cjk_fallback">。</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">由</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">找</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">到</mi><mi>M</mi><mi>S</mi><mi>V</mi><mi>C</mi><mi>P</mi><mn>110.</mn><mi>d</mi><mi>l</mi><mi>l</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">无</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">继</mi><mi mathvariant="normal">续</mi><mi mathvariant="normal">执</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">代</mi><mi mathvariant="normal">码</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">重</mi><mi mathvariant="normal">新</mi><mi mathvariant="normal">安</mi><mi mathvariant="normal">装</mi><mi mathvariant="normal">程</mi><mi mathvariant="normal">序</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">能</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">解</mi><mi mathvariant="normal">决</mi><mi mathvariant="normal">此</mi><mi mathvariant="normal">问</mi><mi mathvariant="normal">题</mi><mi mathvariant="normal">。</mi></mrow><annotation encoding="application/x-tex">由于找不到 MSVCP110.dll，无法继续执行代码。重新安装程序可能会解决此问题。
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">找</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">.</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">无</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">继</span><span class="mord cjk_fallback">续</span><span class="mord cjk_fallback">执</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">重</span><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">安</span><span class="mord cjk_fallback">装</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">题</span><span class="mord cjk_fallback">。</span></span></span></span></span></p>
<h2 id="寻找解决办法">寻找解决办法</h2>
<p>在微软的社区交流中发现遇到相同问题的用户，<code>Microsoft 代理 审阅人</code>给出的解决方法是：</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20210402154150.png" alt="image-20210402154150081" loading="lazy"></figure>
<p>我根据解决办法，安装了指定版本的VC++运行库</p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20210402154356.png" alt="image-20210402154356642" loading="lazy"></figure>
<p>重新运行<code>xshell</code>但是还是出现了文件缺失的提示，我将软件重装以及电脑重启，均无法解决此问题。</p>
<h2 id="最终方法">最终方法</h2>
<p>如果你的电脑系统是X64的，则需要将 <code>vcredist_x64.exe</code> 以及 <code>vcredist_x86.exe</code> 全部勾选并安装，再次打开应用程序解决报错问题。</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20210402154626.png" alt="image-20210402154625922" loading="lazy"></figure>
<p><strong>微软Visual C++ 运行库下载地址：</strong></p>
<p><code>https://www.microsoft.com/en-us/download/details.aspx?id=30679</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[NetflixDNS解锁]]></title>
        <id>https://zoengzihaam.github.io/post/netflixdns-jie-suo/</id>
        <link href="https://zoengzihaam.github.io/post/netflixdns-jie-suo/">
        </link>
        <updated>2021-01-12T06:32:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="netflixdns解锁">NetflixDNS解锁</h1>
<blockquote>
<p>由于Netflix的版权问题，使用一般的代理服务跨区看剧时会被 Netflix 检测到并阻止，当我们使用的vps不能观看Netflix的时候，我们可以选择购买便宜大碗的vps来辅助解锁不能查看Netflix的vps。</p>
</blockquote>
<h2 id="准备工作">准备工作</h2>
<p>正式开始之前，我们需要做一些基本的准备，你至少需要这些东西：</p>
<ul>
<li>支持 Netflix 的代理服务</li>
<li>不支持 Netflix 的代理服务</li>
<li>Netflix订阅</li>
</ul>
<p><strong>就目前而言，美区应该是目前剧集资源最丰富的地区，但是根据本人亲测，美区的资源并不符合国人的观看风格，个人比较推荐香港。</strong></p>
<h2 id="使用dnsmasq解锁netflix奈飞流媒体服务">使用Dnsmasq解锁Netflix（奈飞）流媒体服务</h2>
<p>这里借助了<a href="https://www.moeelf.com/archives/23.html">萌精灵</a> 的脚本实现，这里感谢萌精灵。</p>
<p><strong>安装方法：</strong></p>
<p>支持 Netflix 的代理vps安装</p>
<pre><code class="language-shell">wget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh &amp;&amp; bash dnsmasq_sniproxy.sh -f
</code></pre>
<p><strong>卸载方法：</strong></p>
<pre><code class="language-shell">wget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh &amp;&amp; bash dnsmasq_sniproxy.sh -u
</code></pre>
<p><strong>使用方法：</strong></p>
<p>将<code>不支持 Netflix 的代理VPS</code>的DNS地址修改为<code>支持 Netflix 的代理vps</code>的IP就可以了，如果不能用，记得只保留一个DNS地址试一下。</p>
<p>⚠️：防止滥用，建议不要随意公布IP地址，或使用防火墙做好限制工作。</p>
<p><strong>调试排错：</strong></p>
<ul>
<li>确认sniproxy有效运行</li>
</ul>
<p>重启sni命令：systemctl restart sniproxy</p>
<p>如果sni不在运行，可检查配置/etc/sniproxy.conf，避免ss、nginx或者其他程序监听80,443，可将其配置文件的80更改为801等。 443端口必须给sni监听放行，查看：netstat -tlunp|grep 443</p>
<ul>
<li>确认防火墙放行443,53</li>
</ul>
<p>调试可直接关闭防火墙 systemctl stop firewalld.service</p>
<p>阿里云/谷歌云/AWS等外部防火墙放行 可通过其他服务器 telnet vpsip 53 以及 telnet vpsip 443 进行测试</p>
<ul>
<li>解析域名</li>
</ul>
<p>尝试用其他服务器配置完毕dns后，解析域名：nslookup <a href="https://www.moeelf.com/tag/netflix">netflix</a>.com 判断IP是否是NETFLIX代理机器IP 如果不存在nslookup命令，CENTOS安装：yum install -y bind-utils，DEBIAN安装：apt-get -y install dnsutils</p>
<h2 id="一键脚本修改推荐修改方式">一键脚本修改推荐修改方式：</h2>
<blockquote>
<p>一键脚本很多都会自带dns服务，会影响流媒体的dns解锁。</p>
</blockquote>
<p><strong>修改方式：</strong></p>
<pre><code class="language-shell">vi /etc/v2ray/config.json
</code></pre>
<p>找到DNS</p>
<pre><code class="language-shell">&quot;dns&quot;: {
        &quot;servers&quot;: [
            {
                &quot;address&quot;: &quot;xxx.xxx.xxx.xxx&quot;,     //此处为支持 Netflix 的代理VPS
                &quot;port&quot;: 53,
                &quot;domains&quot;: [
                    &quot;domain:netflix.com&quot;,
                    &quot;domain:netflix.net&quot;,
                    &quot;domain:nflximg.net&quot;,
                    &quot;domain:nflxvideo.net&quot;,
                    &quot;domain:nflxso.net&quot;,
                    &quot;domain:nflxext.com&quot;
                ]
            },
            &quot;localhost&quot;
        ]
    }
</code></pre>
<p>修改配置完成以后，请重启你的V2RAY服务，或是重启VPS。</p>
<h2 id="使用分流让不同的流媒体走不同的dns">使用分流，让不同的流媒体走不同的DNS</h2>
<p><strong>修改方法：</strong></p>
<pre><code class="language-shell">&quot;dns&quot;: {
        &quot;servers&quot;: [
            {
                &quot;address&quot;: &quot;支持Netflix的代理VPS&quot;,
                &quot;port&quot;: 53,
                &quot;domains&quot;: [
                    &quot;domain:netflix.com&quot;,
                    &quot;domain:netflix.net&quot;,
                    &quot;domain:nflximg.net&quot;,
                    &quot;domain:nflxvideo.net&quot;,
                    &quot;domain:nflxso.net&quot;,
                    &quot;domain:nflxext.com&quot;
                ]
            },
            {
                &quot;address&quot;: &quot;支持的代理VPS&quot;,
                &quot;port&quot;: 53,
                &quot;domains&quot;: [
                    &quot;domain:gamer2-cds.cdn.hinet.net&quot;,
                    &quot;domain:gamer-cds.cdn.hinet.net&quot;,
                    &quot;domain:gamer.com.tw&quot;,
                    &quot;domain:i2.bahamut.com.tw&quot;,
                    &quot;domain:app-measurement.com&quot;
                ]
            },
            {
                &quot;address&quot;: &quot;支持的代理VPS&quot;,
                &quot;port&quot;: 53,
                &quot;domains&quot;: [
                    &quot;domain:bilibili.com&quot;
                ]
            },
            &quot;localhost&quot;
        ]
    }
</code></pre>
<h2 id="域名规则">域名规则</h2>
<h3 id="netflix"><strong>Netflix</strong></h3>
<pre><code class="language-shell">netflix.com
netflix.net
nflximg.net
nflximg.com
nflxvideo.net
nflxso.net
nflxext.com
</code></pre>
<h3 id="spotify"><strong>Spotify</strong></h3>
<pre><code class="language-shell">scdn.co
spotify.com
spoti.fi
</code></pre>
<h3 id="bilibili"><strong>bilibili</strong></h3>
<pre><code class="language-shell">bilibili.com
</code></pre>
<h3 id="动画疯"><strong>动画疯</strong></h3>
<pre><code class="language-shell">gamer-cds.cdn.hinet.net
gamer2-cds.cdn.hinet.net
gamer.com.tw
i2.bahamut.com.tw
app-measurement.com
</code></pre>
<h3 id="line"><strong>Line</strong></h3>
<pre><code class="language-shell">lin.ee
line.me
linenaver.jp
line-apps.com
line-cdn.net
line-scdn.net
linetv.tw
cloudfront.net
</code></pre>
<h3 id="fox"><strong>Fox+</strong></h3>
<pre><code class="language-shell">fox.com
foxdng.com
foxnow.com
foxplus.com
foxplay.com
</code></pre>
<h3 id="bbc"><strong>BBC</strong></h3>
<pre><code class="language-shell">bbc.co
bbc.com
co.uk
llnwd.net
akamaized.net
</code></pre>
<h3 id="hulu"><strong>Hulu</strong></h3>
<pre><code class="language-shell">hulu.com
huluim.com
</code></pre>
<h3 id="hbo美区"><strong>hbo(美区)</strong></h3>
<pre><code class="language-shell">hbonow.com
hbogo.com
hbomax.com
hbo.com
</code></pre>
<h3 id="disney"><strong>disney</strong></h3>
<pre><code class="language-shell">disney.com
disneyjunior.com
disneyplus.com
disney-plus.net
dssott.com
bamgrid.com
amazonaws.com
go.com
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ROS双软路由使用jump实现公网端口转发]]></title>
        <id>https://zoengzihaam.github.io/post/19/</id>
        <link href="https://zoengzihaam.github.io/post/19/">
        </link>
        <updated>2020-11-25T15:57:44.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>由于使用了双软路由，ROS上设置upnp，端口不能实现自动转发，所以使用ROS的jump方式来实现这个功能。</p>
</blockquote>
<ol>
<li>首先在ROS功能界面打开 IP → Firewall → NAT</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125232043901.png" alt="image-20201125232043901" loading="lazy"></figure>
<ol start="2">
<li>
<p>添加一个 NAT 规则 (设置jump)</p>
<p>1️⃣ General 设置</p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125232323939.png" alt="image-20201125232323939" loading="lazy"></figure>
<p>2️⃣ Action 设置</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125232515115.png" alt="image-20201125232515115" loading="lazy"></figure>
</li>
<li>
<p>设置需要的端口转发</p>
<p>1️⃣ 添加一个 NAT 规则 (General 设置)</p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125233019443.png" alt="image-20201125233019443" loading="lazy"></figure>
<p>2️⃣ Action 设置</p>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125233236947.png" alt="image-20201125233236947" loading="lazy"></figure>
<p>到此端口转发就设置完成。</p>
</li>
<li>
<p>番外</p>
<blockquote>
<p>由于公网每次拨号，可能导致公网地址会发生改变，这里使用ROS的脚本来实现自动设置JUMP里面的公网地址。</p>
</blockquote>
<p>1️⃣ 在ROS界面 System → scripts 添加一个脚本</p>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125234013781.png" alt="image-20201125234013781" loading="lazy"></figure>
<p>2️⃣ 设置脚本</p>
<figure data-type="image" tabindex="7"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125234414683.png" alt="image-20201125234414683" loading="lazy"></figure>
<p><code>script脚本代码：</code></p>
<pre><code class="language-shell">:global addold
:global addnew
 :set addnew [/interface get [/interface find name=&quot;pppoe-out1&quot;] running]
 :if ($addnew=true) do={
  :set addold [/ip address get [/ip address find dynamic=yes interface=&quot;pppoe-out1&quot;] address]
  :set addold [:pick $addold 0 ([:len $addold ] -3)]
   /ip firewall nat set [/ip firewall nat find comment=&quot;dynamic_nat&quot;] dst-address=$addold
}
</code></pre>
<p>3️⃣ 设置一个定时Profile</p>
<p>ROS界面 → PPP → Profiles 添加一个新的Profile</p>
<figure data-type="image" tabindex="8"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125234658556.png" alt="image-20201125234658556" loading="lazy"></figure>
<p>设置Profiles</p>
<figure data-type="image" tabindex="9"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125234911018.png" alt="image-20201125234911018" loading="lazy"></figure>
<p>设置 Scripts</p>
<figure data-type="image" tabindex="10"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125235117699.png" alt="image-20201125235117699" loading="lazy"></figure>
<p><code>profile脚本代码：</code></p>
<pre><code class="language-shell">delay 3s
:execute &quot;dynamic_nat&quot;
</code></pre>
</li>
</ol>
<p>🌈以上，公网端口转发的jump设置全部设置完毕，如果过程有错误的地方，还请各位指教一起讨论，谢谢。💨</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker开机自启]]></title>
        <id>https://zoengzihaam.github.io/post/16/</id>
        <link href="https://zoengzihaam.github.io/post/16/">
        </link>
        <updated>2020-07-25T14:51:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="docker开机自启">docker开机自启</h1>
<h2 id="一-docker服务设置自动启动">一、docker服务设置自动启动</h2>
<blockquote>
<p>适用于yum安装的各种服务</p>
</blockquote>
<ul>
<li>查看已启动的服务</li>
</ul>
<pre><code class="language-shell">systemctl list-units --type=service
</code></pre>
<ul>
<li>查看是否设置开机启动</li>
</ul>
<pre><code class="language-shell">systemctl list-unit-files | grep enable
</code></pre>
<ul>
<li>设置开机启动</li>
</ul>
<pre><code class="language-shell">systemctl enable docker.service
</code></pre>
<ul>
<li>关闭开机启动</li>
</ul>
<pre><code class="language-shell">systemctl disable docker.service
</code></pre>
<h2 id="二-docker容器设置自动启动">二、docker容器设置自动启动</h2>
<ul>
<li>启动时加 --restart=always</li>
</ul>
<pre><code class="language-shell">docker run tomcat -it -d -p 8080:8080 --restart=always
</code></pre>
<ul>
<li>
<p>如果已经运行过的项目</p>
<p>针对：已经启动的项目，使用update更新</p>
</li>
</ul>
<pre><code class="language-shell">docker update --restart=always imagesID
</code></pre>
<p><strong>restart参数的启动选项</strong></p>
<table>
<thead>
<tr>
<th>Flag</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>no</td>
<td>不自动重启容器. (默认value)</td>
</tr>
<tr>
<td>on-failure</td>
<td>容器发生error而退出(容器退出状态不为0)重启容器</td>
</tr>
<tr>
<td>unless-stopped</td>
<td>在容器已经stop掉或Docker stoped/restarted的时候才重启容器</td>
</tr>
<tr>
<td>always</td>
<td>在容器已经stop掉或Docker stoped/restarted的时候才重启容器</td>
</tr>
</tbody>
</table>
<hr>
<p>转载至：<a href="https://www.cnblogs.com/gcgc/p/10494615.html#_label0">秋寻草</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker安装GUI图形化界面（Portainer）]]></title>
        <id>https://zoengzihaam.github.io/post/15/</id>
        <link href="https://zoengzihaam.github.io/post/15/">
        </link>
        <updated>2020-07-25T13:21:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="docker安装gui图形化界面portainer">Docker安装GUI图形化界面（Portainer）</h1>
<blockquote>
<p>Portainer是一个开源、轻量级Docker管理用户界面，基于Docker API，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型单位对容器管理的全部需求。</p>
</blockquote>
<h2 id="快速入门">快速入门</h2>
<h3 id="1官网">1.官网</h3>
<p>https://www.portainer.io/installation/</p>
<h3 id="2使用docker安装portainer">2.使用docker安装portainer</h3>
<h4 id="1搜索portainer">1.搜索portainer</h4>
<pre><code class="language-visual">docker search portainer
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200725205726.png" alt="image-20200725205725916" loading="lazy"></figure>
<h4 id="2将镜像拉取到本地">2.将镜像拉取到本地</h4>
<pre><code class="language-visual">docker pull portainer/portainer
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200725205825.png" alt="image-20200725205824991" loading="lazy"></figure>
<h4 id="3运行镜像">3.运行镜像</h4>
<pre><code class="language-vi">docker run -d -it --name portainerUI -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200725205900.png" alt="image-20200725205900786" loading="lazy"></figure>
<p>注意：这里如果使用单机版，一定要使用 <code>-v /var/run/docker.sock:/var/run/docker.sock</code>，否则在进入WEBUI的时候创建会出现问题，这里 <code>volume</code>也可使用官方教程，这里将运行代码一并贴入。</p>
<pre><code class="language-visual">docker volume create portainer_data
docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
</code></pre>
<p>官方这里创建了一个portainer_data的文件夹用于存储数据，大家按需运行即可。</p>
<h3 id="3访问portainer">3.访问Portainer</h3>
<h4 id="1创建用户">1.创建用户</h4>
<p>打开浏览器输入 <code>ip:端口号</code>，这里ip是Linux的地址，端口号为启动的时候映射的端口。</p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200725211127.png" alt="image-20200725211127863" loading="lazy"></figure>
<h4 id="2连接docker环境">2.连接docker环境</h4>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200725211700.png" alt="image-20200725211700177" loading="lazy"></figure>
<h4 id="3进入portainer管理">3.进入Portainer管理</h4>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200725211815.png" alt="image-20200725211815704" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GateWay自定义全局GlobalFilter]]></title>
        <id>https://zoengzihaam.github.io/post/13/</id>
        <link href="https://zoengzihaam.github.io/post/13/">
        </link>
        <updated>2020-07-06T11:14:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="gateway自定义全局globalfilter">GateWay自定义全局GlobalFilter</h1>
<h2 id="1实现两个接口">1.实现两个接口</h2>
<ul>
<li>
<p>GlobalFilter</p>
<p>用于自定义过滤器，例如进行Token验证</p>
</li>
<li>
<p>Ordered</p>
<p>Spring提供了Ordered这个接口，来处理相同接口实现类的优先级问题。</p>
</li>
</ul>
<pre><code class="language-Java">import lombok.extern.slf4j.Slf4j;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.Date;

@Component
@Slf4j
public class MyLogGateWayFilter implements GlobalFilter, Ordered {

    @Override
    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {

        //打印输出信息
        log.info(&quot;************come in MyLogGateWayFilter&quot; + new Date());

        //获取request中的参数
        String name = exchange.getRequest().getQueryParams().getFirst(&quot;name&quot;);
        //判断参数的信息
        if(name ==null){
            log.info(&quot;************用户名为null，非法用户，/(ㄒoㄒ)/~~&quot;);
            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);
            return exchange.getResponse().setComplete();
        }

        return chain.filter(exchange);
    }

    @Override
    public int getOrder() {
        return 0;
    }
}
</code></pre>
<h2 id="2-使用cmd验证">2. 使用CMD验证</h2>
<ul>
<li>
<p>遵循过滤器中的规则</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706185828.png" alt="image-20200706185828629" loading="lazy"></figure>
</li>
<li>
<p>不遵循过滤器中的规则</p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706185856.png" alt="image-20200706185856027" loading="lazy"></figure>
</li>
</ul>
<h2 id="3网页端测试">3.网页端测试</h2>
<ul>
<li>
<p>遵循过滤器中的规则</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706185952.png" alt="image-20200706185952065" loading="lazy"></figure>
</li>
<li>
<p>不遵循过滤器中的规则</p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706190016.png" alt="image-20200706190016823" loading="lazy"></figure>
</li>
</ul>
<p>结论：自定义Filter类似SpringMVC中的Filter，GlobalGilter 全局过滤器接口与 GatewayFilter 网关过滤器接口具有相同的方法定义。全局过滤器是一系列特殊的过滤器，会根据条件应用到所有路由中。网关过滤器是更细粒度的过滤器，作用于指定的路由中。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微服务中使用GateWay实现保护、增强和控制对于 API 服务的访问。]]></title>
        <id>https://zoengzihaam.github.io/post/12/</id>
        <link href="https://zoengzihaam.github.io/post/12/">
        </link>
        <updated>2020-07-06T09:16:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="微服务中使用gateway实现保护-增强和控制对于-api-服务的访问">微服务中使用GateWay实现保护、增强和控制对于 API 服务的访问。</h1>
<blockquote>
<p>网关的角色是作为一个 API 架构，用来保护、增强和控制对于 API 服务的访问。</p>
<p>API 网关是一个处于应用程序或服务（提供 REST API 接口服务）之前的系统，用来管理授权、访问控制和流量限制等，这样 REST API 接口服务就被 API 网关保护起来，对所有的调用者透明。因此，隐藏在 API 网关后面的业务系统就可以专注于创建和管理服务，而不用去处理这些策略性的基础设施。</p>
</blockquote>
<h2 id="简单使用">简单使用</h2>
<h3 id="三个概念">三个概念</h3>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706150913.png" alt="image-20200706150913342" loading="lazy"></figure>
<p>注：上图引用CSDN博主<a href="https://blog.csdn.net/rain_web/article/details/102469745">AlgoRain</a>，这里致谢一下大佬详细的讲解。</p>
<h3 id="springcloud中使用">springcloud中使用</h3>
<h4 id="1新建module">1.新建Module</h4>
<p>添加一个新的Module，cloud-gateway-gateway9527（名称按照自己喜好）</p>
<h4 id="2添加pom依赖">2.添加POM依赖</h4>
<pre><code class="language-Java">&lt;dependencies&gt;
        &lt;!--gateway--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;!--Eureka client--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;!--导入自己定义的api通用包--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.ziznah.springcloud&lt;/groupId&gt;
            &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;
            &lt;version&gt;${project.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--一般基础配置类--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
            &lt;scope&gt;runtime&lt;/scope&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<h4 id="3添加yml文件">3.添加YML文件</h4>
<pre><code class="language-yaml">#配置端口
server:
  port: 9527

spring:
  application:
    name: cloud-gateway
  cloud:
    gateway:
      routes:
        - id: payment_routh #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: http://localhost:8001          #匹配后提供服务的路由地址
          predicates:
            - Path=/payment/get/**         # 断言，路径相匹配的进行路由

        - id: payment_routh2 #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: http://localhost:8001          #匹配后提供服务的路由地址
          predicates:
            - Path=/payment/lb/**         # 断言，路径相匹配的进行路由
#注册进服务中心，这里使用的是eureka
eureka:
  instance:
    hostname: cloud-gateway-service
  client: #服务提供者provider注册进eureka服务列表内
    service-url:
      register-with-eureka: true
      fetch-registry: true
      defaultZone: http://localhost:7001/eureka/

</code></pre>
<h4 id="4主启动类">4.主启动类</h4>
<pre><code class="language-Java">import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;

@SpringBootApplication
@EnableEurekaClient
@EnableDiscoveryClient
public class GateWayMain9527 {
    public static void main(String[] args) {
        SpringApplication.run(GateWayMain9527.class,args);
    }
}
</code></pre>
<h4 id="使用配置类来简单使用gateway">使用配置类来简单使用GateWay</h4>
<ul>
<li>将http://localhost:9527/guonei转发到百度的新闻网中的国内信息</li>
</ul>
<pre><code class="language-java">import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class GateWayConfig {

    /**
     * 配置一个id为route-name的路由规则，
     * 当访问地址http://localhost:9527/guonei时会自动转发到地址：http://news.baidu.com/guonei
     * @param routeLocatorBuilder
     * @return
     */
    @Bean
    public RouteLocator customRouteLocator(RouteLocatorBuilder routeLocatorBuilder){
        //获取网关的routes
        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();
        //设置网关的内容
        routes.route(&quot;path_route_ziznah&quot;,r -&gt; r.path(&quot;/guonei&quot;).uri(&quot;http://news.baidu.com/guonei&quot;)).build();

        //返回内容
        return routes.build();
    }
}
</code></pre>
<h4 id="实现动态路由">实现动态路由</h4>
<ul>
<li>多个服务提供者进行提供服务，使用动态路由来到达负载均衡</li>
</ul>
<h5 id="1yml">1.YML</h5>
<pre><code class="language-yaml">server:
  port: 9527

spring:
  application:
    name: cloud-gateway
  cloud:
    gateway:
     #开启动态创建路由的功能
      discovery:
        locator:
          enabled: true   #开启从注册中心动态创建路由的功能，利用微服务名进行路由
      routes:
        - id: payment_routh #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
#          uri: http://localhost:8001          #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service   #匹配后提供服务的路由地址
          predicates:
            - Path=/payment/get/**         # 断言，路径相匹配的进行路由

        - id: payment_routh2 #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
#          uri: http://localhost:8001          #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service   #匹配后提供服务的路由地址
          predicates:
            - Path=/payment/lb/**         # 断言，路径相匹配的进行路由

eureka:
  instance:
    hostname: cloud-gateway-service
  client: #服务提供者provider注册进eureka服务列表内
    service-url:
      register-with-eureka: true
      fetch-registry: true
      defaultZone: http://localhost:7001/eureka/
</code></pre>
<p>注：需要注意的是uri的协议lb，表示启用Gateway的负载均衡功能，lb://serverName是spring cloud  gatway在微服务中自动为我们创建的负载均衡uri。</p>
<h3 id="predicates断言不同类型">predicates断言不同类型</h3>
<h4 id="1after">1.After</h4>
<ul>
<li>YML文件</li>
</ul>
<pre><code class="language-yaml"># 断言，路径相匹配的进行路由
predicates:		
	- After=2020-07-06T16:43:08.146+08:00[Asia/Shanghai]
</code></pre>
<p>上述的时间地址可使用Java中time的api来获取：</p>
<pre><code class="language-java">import java.time.ZoneId;
import java.time.ZonedDateTime;

public class T2 {
    public static void main(String[] args) {
        //获取默认时区
        ZonedDateTime zdt = ZonedDateTime.now();
        System.out.println(zdt);
        //通过指定时区获取当前时间
        ZonedDateTime now = ZonedDateTime.now(ZoneId.of(&quot;America/New_York&quot;));
        System.out.println(now);
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706164619.png" alt="image-20200706164619481" loading="lazy"></figure>
<h4 id="2before">2.Before</h4>
<p>方法同After</p>
<h4 id="3between">3.Between</h4>
<p>方法同After</p>
<h4 id="4cookie">4.Cookie</h4>
<ul>
<li>YML文件</li>
</ul>
<pre><code class="language-yaml"># 断言，路径相匹配的进行路由
predicates:		
	- Cookie=ceshi,admin	
</code></pre>
<p>Windows中CMD窗口使用curl命令进行http请求</p>
<ul>
<li>不带Cookie进行访问测试。</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706165615.png" alt="image-20200706165615728" loading="lazy"></figure>
<ul>
<li>带Cookie进行访问测试。</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706165741.png" alt="image-20200706165741593" loading="lazy"></figure>
<h4 id="5header">5.Header</h4>
<ul>
<li>YML文件</li>
</ul>
<pre><code class="language-yaml"># 断言，路径相匹配的进行路由
predicates:		
	- Header=X-Request-Id, \d+		#请求头要有X-Request-Id属性，并且值为正数的正则表达式。
</code></pre>
<p>使用CMD的curl命令测试</p>
<ul>
<li>带Header</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706170541.png" alt="image-20200706170541704" loading="lazy"></figure>
<ul>
<li>
<p>不带Header</p>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706170608.png" alt="image-20200706170608051" loading="lazy"></figure>
</li>
<li>
<p>带错误的Header信息</p>
<figure data-type="image" tabindex="7"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706170644.png" alt="image-20200706170644528" loading="lazy"></figure>
</li>
</ul>
<h4 id="6host">6.Host</h4>
<ul>
<li>YML</li>
</ul>
<pre><code class="language-yaml"># 断言，路径相匹配的进行路由
predicates:		
	- Host=**.ceshi.com
</code></pre>
<p>使用CMD的curl命令测试</p>
<ul>
<li>
<p>带Host测试</p>
<figure data-type="image" tabindex="8"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706171138.png" alt="image-20200706171138672" loading="lazy"></figure>
</li>
<li>
<p>不带Host测试</p>
<figure data-type="image" tabindex="9"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706171300.png" alt="image-20200706171300046" loading="lazy"></figure>
</li>
<li>
<p>带错误Host测试</p>
<figure data-type="image" tabindex="10"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200706171234.png" alt="image-20200706171234897" loading="lazy"></figure>
</li>
</ul>
<h4 id="7method">7.Method</h4>
<ul>
<li>YML</li>
</ul>
<pre><code class="language-yaml"># 断言，路径相匹配的进行路由
predicates:		
	- Method=GET
</code></pre>
<h4 id="8path">8.Path</h4>
<h4 id="9query">9.Query</h4>
<h4 id="10weight">10.Weight</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[参考RoundRobinRule代码模拟负载均衡]]></title>
        <id>https://zoengzihaam.github.io/post/11/</id>
        <link href="https://zoengzihaam.github.io/post/11/">
        </link>
        <updated>2020-06-25T10:12:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="参考roundrobinrule代码模拟负载均衡">参考RoundRobinRule代码模拟负载均衡</h1>
<h2 id="1定义一个loadbalancer接口">1.定义一个LoadBalancer接口</h2>
<ul>
<li>获取服务器集群上能够提供服务的机器数量</li>
</ul>
<pre><code class="language-java">public interface Loadbalancer {
    /**
     * 获取服务器集群上能够提供服务的机器数量
     * @param serviceInstances
     * @return
     */
    ServiceInstance instances(List&lt;ServiceInstance&gt; serviceInstances);
}
</code></pre>
<h2 id="2实现loadbalancer接口中的方法">2.实现LoadBalancer接口中的方法</h2>
<ul>
<li>利用自旋锁，创建获取当前服务调用是第几次访问的方法</li>
<li>实现接口中获取提供服务机器数量的方法，模拟负载均衡算法来达到负载调用服务。</li>
</ul>
<pre><code class="language-java">/**
 * ClassName: MyLB
 * Description: 参考RoundRobinRule代码模拟负载均衡
 * Author: SUGAR
 * Date: 2020/6/25 16:09
 * Version: 1.0
 **/
@Component
public class MyLB implements Loadbalancer{

    private AtomicInteger atomicInteger = new AtomicInteger(0);

    /**
     * 获取当前服务调用是第几次访问
     * @return
     */
    public final int getAndIncrement(){
        int current;
        int next;

        do {
            current = this.atomicInteger.get();
            next = current &gt;= 2147483647 ? 0 : current + 1;
        }while (!this.atomicInteger.compareAndSet(current,next));
        System.out.println(&quot;*****访问第&quot; + next + &quot;次！*****&quot;);
        return next;
    }

    /**
     * 根据第几次访问，模拟负载均衡算法来达到负载调用服务
     * 负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标
     * 每次服务启动后rest接口计数从1开始
     * @param serviceInstances
     * @return
     */
    @Override
    public ServiceInstance instances(List&lt;ServiceInstance&gt; serviceInstances) {

        int index = getAndIncrement() % serviceInstances.size();

        return serviceInstances.get(index);
    }
}
</code></pre>
<h2 id="3取消loadbalanced注解">3.取消LoadBalanced注解</h2>
<ul>
<li>取消ApplicationContextConfig中RestTemplate的get方法的LoadBalanced注解，使用自己模拟的负载均衡。</li>
</ul>
<pre><code class="language-java">@Configuration
public class ApplicationContextConfig {

    @Bean
//    @LoadBalanced 使用自己模拟的负载均衡的方法
    public RestTemplate getRestTemplate(){
        return new RestTemplate();
    }
}
</code></pre>
<h2 id="4添加服务提供商提供的controller方法">4.添加服务提供商提供的controller方法</h2>
<ul>
<li>添加一个获取当前服务提供者端口的方法，用来负载均衡。</li>
</ul>
<pre><code class="language-java">@GetMapping(value = &quot;/payment/lb&quot;)
public String getPaymentLB() {
    return serverPort;
}
</code></pre>
<p><font style="color:red"><strong>注：</strong></font>这里的方法添加到提供商的controller中。</p>
<h2 id="5调用者添加controller方法">5.调用者添加controller方法</h2>
<ul>
<li>调用者controller添加调用服务提供商的方法，测试负载均衡</li>
</ul>
<pre><code class="language-java">@GetMapping(value = &quot;/consumer/payment/lb&quot;)
public String getPayementLB(){
    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;CLOUD-PAYMENT-SERVICE&quot;);
    //判断服务是否为有效服务
    if(instances == null || instances.size() &lt;= 0){
        return null;
    }

    ServiceInstance serviceInstance = loadbalancer.instances(instances);
    URI uri = serviceInstance.getUri();

    return restTemplate.getForObject(uri + &quot;/payment/lb&quot;,String.class);
}
</code></pre>
<h2 id="6测试">6.测试</h2>
<ul>
<li>启动对应的服务</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200625175834.png" alt="image-20200625175834663" loading="lazy"></figure>
<ul>
<li>查看是否启动成功（模拟提供者集群以及服务器集群）</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200625180016.png" alt="image-20200625180016280" loading="lazy"></figure>
<ul>
<li>模拟调用者访问接口</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200625180207.png" alt="image-20200625180207309" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200625180221.png" alt="image-20200625180221054" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200625180244.png" alt="image-20200625180244048" loading="lazy"></figure>
<p>​	根据以上调用，后台也打印出相应的调用信息。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker中 CMD 与 ENTRYPOINT 保留指令的区别]]></title>
        <id>https://zoengzihaam.github.io/post/10/</id>
        <link href="https://zoengzihaam.github.io/post/10/">
        </link>
        <updated>2020-06-09T13:52:56.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>编写Dockerfile时，时常看到最后会看到CMD或者ENTRYPOINT 的保留指令，但是他们的意义都为：指定一个容器启动时要运行的命令，那么它们之间的差异在哪里？</p>
</blockquote>
<h2 id="使用curl命令来说明">使用curl命令来说明</h2>
<h3 id="首先编写两个dockerfile">首先编写两个Dockerfile</h3>
<ol>
<li>使用<code>CMD</code>保留指令。</li>
</ol>
<pre><code class="language-shell">FROM centos
RUN yum install -y curl
CMD [ &quot;curl&quot;, &quot;-s&quot;, &quot;https://www.baidu.com/&quot; ]
</code></pre>
<p>这里 Dockerfile 的名字要求小写，否则会报错<code>invalid argument &quot;cmdCentos&quot; for &quot;-t, --tag&quot; flag: invalid reference format: repository name must be lowercase See 'docker build --help'.</code></p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200609213217.png" alt="image-20200609213217668" loading="lazy"></figure>
<ol start="2">
<li>使用<code>ENTRYPOINT</code>保留指令。</li>
</ol>
<pre><code class="language-shell">FROM centos
RUN yum install -y curl
ENTRYPOINT [ &quot;curl&quot;, &quot;-s&quot;, &quot;https://www.baidu.com/&quot; ]
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200609213320.png" alt="image-20200609213320960" loading="lazy"></figure>
<h3 id="在docker中进行build进行构建一个新的镜像">在docker中进行build进行构建一个新的镜像</h3>
<ol>
<li>
<p>构建<code>CMD</code>保留指令的Dockerfile。</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200609213449.png" alt="image-20200609213449579" loading="lazy"></figure>
</li>
<li>
<p>构建<code>ENTRYPOINT</code>保留指令的Dockerfile。</p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200609213554.png" alt="image-20200609213553986" loading="lazy"></figure>
</li>
</ol>
<h3 id="运行两个镜像进行对比">运行两个镜像进行对比</h3>
<ol>
<li>
<p>运行<code>CMD</code>保留指令的镜像。</p>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200609213732.png" alt="image-20200609213732383" loading="lazy"></figure>
</li>
<li>
<p>运行<code>ENTRYPOINT</code>保留指令的镜像。</p>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200609213855.png" alt="image-20200609213855288" loading="lazy"></figure>
</li>
</ol>
<p>这个时候我们发现，两个镜像运行起来没有任何区别，但是<strong>重点来了</strong>！当我们需要<strong>对镜像启动时要运行的命令进行增强</strong>的时候。</p>
<p>比如我们还想获取指定网站的<code>头信息</code>。</p>
<ol start="3">
<li>
<p>运行增强后的<code>CMD</code>保留指令的镜像。</p>
<figure data-type="image" tabindex="7"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200609214241.png" alt="image-20200609214241092" loading="lazy"></figure>
</li>
<li>
<p>运行增强后的<code>ENTRYPOINT</code>保留指令的镜像。</p>
<figure data-type="image" tabindex="8"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20200609214443.png" alt="image-20200609214443164" loading="lazy"></figure>
</li>
</ol>
<h3 id="总结">总结</h3>
<p>由上述的案例，我们不难发现，在执行Dockerfile中，如果使用了<code>CMD</code>保留指令，那么在执行镜像的时候，我们在其启动命令后面添加<code>OPTION</code>选项的时候，将会覆盖Dockerfile中的上一句指令，造成运行失败。例如：</p>
<pre><code class="language-shell">FROM centos
RUN yum install -y curl
CMD [ &quot;curl&quot;, &quot;-s&quot;, &quot;https://www.baidu.com/&quot; ]
CMD -i
</code></pre>
<p>如果使用<code>ENTRYPOINT</code>保留指令，那么在执行镜像的时候，我们在其启动命令后面添加<code>OPTION</code>选项的时候，会对运行的命令进行<code>“增强”</code>。例如：</p>
<pre><code class="language-shell">FROM centos
RUN yum install -y curl
ENTRYPOINT [ &quot;curl&quot;, &quot;-s&quot;,&quot;-i&quot;, &quot;https://www.baidu.com/&quot; ]
</code></pre>
<p>所以，在实际应用中，是使用<code>CMD</code>还是<code>ENTRYPOINT</code>保留指令，要根据具体的业务要求。</p>
]]></content>
    </entry>
</feed>